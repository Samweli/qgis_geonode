{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QGIS GeoNode QGIS plugin \u00b6 {some inspirational screenshot} A QGIS plugin for working with GeoNode resources Documentation: https://kartoza.github.io/qgis_geonode Source code: https://github.com/kartoza/qgis_geonode This is a QGIS plugin to allow working with and managing GeoNode resources in QGIS. Installation \u00b6 Development for this plugin is still in early stages. Therefore it is not available in the main QGIS plugin repository. However, you may still install it comfortably from inside your QGIS installation, by configuring our our custom repository.It is available at: https://kartoza.github.io/qgis_geonode/repo/plugins.xml Add this custom repository inside QGIS plugin manager Refresh the list of available plugins Search for a plugin named QGIS GeoNode Install it! Check the Development section for a more developer oriented installation procedure License \u00b6 This plugin is distributed under the terms of the GNU General Public License version 3","title":"Home"},{"location":"#qgis-geonode-qgis-plugin","text":"{some inspirational screenshot} A QGIS plugin for working with GeoNode resources Documentation: https://kartoza.github.io/qgis_geonode Source code: https://github.com/kartoza/qgis_geonode This is a QGIS plugin to allow working with and managing GeoNode resources in QGIS.","title":"QGIS GeoNode QGIS plugin"},{"location":"#installation","text":"Development for this plugin is still in early stages. Therefore it is not available in the main QGIS plugin repository. However, you may still install it comfortably from inside your QGIS installation, by configuring our our custom repository.It is available at: https://kartoza.github.io/qgis_geonode/repo/plugins.xml Add this custom repository inside QGIS plugin manager Refresh the list of available plugins Search for a plugin named QGIS GeoNode Install it! Check the Development section for a more developer oriented installation procedure","title":"Installation"},{"location":"#license","text":"This plugin is distributed under the terms of the GNU General Public License version 3","title":"License"},{"location":"about/","text":"About \u00b6 This plugin is being created as an activity of the PRN project, led by SPC . Its goal is to develop a QGIS-based client for GeoNode that allows GIS users to more easily integrate GeoNode into their workflows. Original design and implementation is being done as a joint effort between the Kartoza and GeoSolutions teams, with input from the broader community. The plugin will eventually be made available to the general QGIS audience by being released onto the official plugins repository. It is also expected that it will supersede the current QGIS GeoNode integration.","title":"About"},{"location":"about/#about","text":"This plugin is being created as an activity of the PRN project, led by SPC . Its goal is to develop a QGIS-based client for GeoNode that allows GIS users to more easily integrate GeoNode into their workflows. Original design and implementation is being done as a joint effort between the Kartoza and GeoSolutions teams, with input from the broader community. The plugin will eventually be made available to the general QGIS audience by being released onto the official plugins repository. It is also expected that it will supersede the current QGIS GeoNode integration.","title":"About"},{"location":"development/","text":"Development \u00b6 This plugin uses poetry , typer and black . Fork the code repository Clone your fork locally Install poetry Install the plugin dependencies into a new virtual env with cd qgis_geonode poetry install The plugin comes with a pluginadmin.py python module which provides a nice CLI with commands useful for development: poetry run python pluginadmin.py --help # install plugin into your local QGIS python plugins directory poetry run python pluginadmin.py install poetry run python pluginadmin.py install-qgis-into-venv When manually trying out the plugin locally you just need to call poetry run python pluginadmin.py install . This command will copy all files into your local QGIS python plugins directory. Alternatively, the plugin reloader QGIS plugin can be used as a means to install and reload the plugin. The functionality that allows re-running the poetry install command is currently in a proposed state, so you may install plugin reloader directly from the github fork mentioned in the above pull request Running tests \u00b6 Tests are made with pytest and pytest-qt . They can be run with: # optionally create a QGIS_PREFIX_PATH env variable, if your QGIS is self-compiled poetry run pytest Contributing \u00b6 We welcome contributions from everybody but ask that the following process be adhered to: Find (or open) the issue that describes the problem that you want to help solving. Make a mention in the issue that you are working on a solution Fork this repo and work on a solution to the problem. Remember to add passing automated tests to attest that the problem has been fixed Run your code through the black formatter before submitting your PR. Otherwise the CI pipeline may fail, and we will request that you fix it before merging Releasing new versions \u00b6 This plugin uses an automated release process that is based upon github actions . New versions shall be released under the semantic versioning contract. In order to have a new version of the plugin release: Be sure to have updated the CHANGELOG Be sure to have updated the version on the pyproject.toml file. You can either manually modify the tool.poetry.version key or you can run the poetry version {version specifier} command Create a new git annotated tag and push it to the repository. The tag name must follow the v{major}.{minor}.{patch} convention, for example: git tag -a -m 'version 0.3.2' v0.3.2 git push origin v0.3.2 Github actions will take it from there. The new release shall appear in the custom QGIS plugin repo shortly","title":"Development"},{"location":"development/#development","text":"This plugin uses poetry , typer and black . Fork the code repository Clone your fork locally Install poetry Install the plugin dependencies into a new virtual env with cd qgis_geonode poetry install The plugin comes with a pluginadmin.py python module which provides a nice CLI with commands useful for development: poetry run python pluginadmin.py --help # install plugin into your local QGIS python plugins directory poetry run python pluginadmin.py install poetry run python pluginadmin.py install-qgis-into-venv When manually trying out the plugin locally you just need to call poetry run python pluginadmin.py install . This command will copy all files into your local QGIS python plugins directory. Alternatively, the plugin reloader QGIS plugin can be used as a means to install and reload the plugin. The functionality that allows re-running the poetry install command is currently in a proposed state, so you may install plugin reloader directly from the github fork mentioned in the above pull request","title":"Development"},{"location":"development/#running-tests","text":"Tests are made with pytest and pytest-qt . They can be run with: # optionally create a QGIS_PREFIX_PATH env variable, if your QGIS is self-compiled poetry run pytest","title":"Running tests"},{"location":"development/#contributing","text":"We welcome contributions from everybody but ask that the following process be adhered to: Find (or open) the issue that describes the problem that you want to help solving. Make a mention in the issue that you are working on a solution Fork this repo and work on a solution to the problem. Remember to add passing automated tests to attest that the problem has been fixed Run your code through the black formatter before submitting your PR. Otherwise the CI pipeline may fail, and we will request that you fix it before merging","title":"Contributing"},{"location":"development/#releasing-new-versions","text":"This plugin uses an automated release process that is based upon github actions . New versions shall be released under the semantic versioning contract. In order to have a new version of the plugin release: Be sure to have updated the CHANGELOG Be sure to have updated the version on the pyproject.toml file. You can either manually modify the tool.poetry.version key or you can run the poetry version {version specifier} command Create a new git annotated tag and push it to the repository. The tag name must follow the v{major}.{minor}.{patch} convention, for example: git tag -a -m 'version 0.3.2' v0.3.2 git push origin v0.3.2 Github actions will take it from there. The new release shall appear in the custom QGIS plugin repo shortly","title":"Releasing new versions"},{"location":"user-guide/","text":"User guide \u00b6 The QGIS GeoNode plugin adds a new data provider to QGIS. This provider is able to interact with GeoNode instances...","title":"User guide"},{"location":"user-guide/#user-guide","text":"The QGIS GeoNode plugin adds a new data provider to QGIS. This provider is able to interact with GeoNode instances...","title":"User guide"}]}